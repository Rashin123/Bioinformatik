Python 2.7.15 (v2.7.15:ca079a3ea3, Apr 29 2018, 20:59:26) 
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin
Type "copyright", "credits" or "license()" for more information.
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x!= y:
			ham += 1

			
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x!= y:
			ham += 1
		return ham

	
>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
			distance += hamming
		return distance

	
>>> dna = ["ATCTAAGAGGTTGAAACTGACAAACACTGGTCAAAGATCGTATGAATCAATCCGAGTGGTCAACCGTGGCGCTCTCGACTGGTTCGGCCG"]
>>> pattern = "GGACTGT"
>>> print(distanceBetweenPatternAndString(pattern, dna))
6
>>> dna = ["ATCTAAGAGGTTGAAACTGACAAACACTGGTCAAAGATCGTATGAATCAATCCGAGTGGTCAACCGTGGCGCTCTCGACTGGTTCGGCCGATGGCTTT TTCGCAGCCGTTGGGTCTCAGAACCCCGGGGGGTAAACGGATCGCCTGGAAACCGCGAGACCATGGCGTGAGTACGACAAACGTTACTGACCCGTGAG CAGGGACAGCTATGAGTGGAGCCCCGTAGGCTATCTGTCGACATTTTTTGTCAGAGGTGGTCTTCTCTTCAATATTCGGGAATAAAGCGGAGAATTGG CCTCCCAGTACCAGCTTTGGGATCTTGAAGATGGGTCGTCCGTTATAAAATAGGCCCGCTTAGGTGGAATATACTTATCCGACGCCGTGCATTCGCTG GCTTTTCATAACCAAGAAGTTTGGAGCGGCGGACGTCGGGCCCAACAAGTCGCCACCGTCTCGGCGAATAATAACGAGGATTAATACGCCCAGTCTAT GGGACGAGCCGCCAGTTTCACTCCATTGTCGTTGTACAAGAATCCCAGTGTGTCAGTAAACGGCTAGTCTATATTATTCAGTCATCTTCCATCTCCGT GACCGGAGGGCCACGAGGAACTTCGCAAACGCGCTCCTTACTCTGGTATACAGCACAGTCTAGCCGGGACACTAGTGCTGGAACGCTTCGCAGAGTTT CAGGCCAGGGAGATTAGTAAGTAATATAGATGTTCTTGGCCCTGGTACGCACCTTTGAGCACTGTAGAAGTTCGATACATACCCGGTTGATGGGCCCA AGACACTTCCTATTGAAGTCCCCCGGAGTACATGGCCAGGTAGCGAGTTTAGTAGAAGCCTCCCGTTCGACACTACAACACGGTCTAAGTCTCAGCGT GAACAATAAGGTGCCGCAGACCTAACGGGATACCTCATATAGTATCCCCTTATGGAGGCTGGGCGGAAACCCTTTCCCCCATGTCCCGGCGGTGCCGC GCACTTCAAGCATTCAGTCCAGTCCACAGGAATACAAGGTCGATGGCTAACTTCCTGTCCAGTGAAGGTTGCAGGTAGTATGCTATATTGAGCGCCGA GCACTGGCAAGGACGAGCCCATGCTATCTAAAACGATGGCCTAGCCACAAGATGGGACCTTGAGACTCGAACGTACTTTCCGTGAATATTTACACGAT GTGCTACAGTCTAGCGCCCATCCCTAGTGTGCGACTTCGAAACGCTTGTCCAACGTATGTCTTAGGAGGTCGGGACATTCTACTCCTGCTAAAAACCA ATAGCTTTTGTAATATGAGCGCTGGCGTAAGACAGTTTCTTGGACAAGGGGTGCCGAACGTCCATGTTTGGGAATCAAAGAGAGTAAAATTACCAAGA AAGGTACGTGTGGCCTATCTCCTAATCCGTGCACAGAAGCGTAGCACGAACGGCTCAACGTACCCGCGTAGGCGCGTAATGGAAATGCCCGACACATG AGTTCAGCTTTCAGCGGTCTATAGCTAGAATTGCGCTTAGGCGATTTTGTTCATCCTACCGCAATCCCGTGGTTTGACGCGTCTATGTCGGCGCACTT TAGCACCCGCTGCGACAGTCCTCTTCAAGGTATTGGGTCATAAGGGGTACCGTCTAGGAGTGCGAACTTGGGGGGTTAGCCAGGGGGGAGGGAACCCC ATCCGCGACTTATATACCGTCTGCGCCTAAGTTGACGCGAGGGGGTTCCGTGGATAGGGGTGTGGCTTGAGAAAACTGAAAGTAACCATGTTAAACCA CACGGTAAATAACGGGTACAAATCTCAATCCAACTGTGTTAGATATCTACACCGCCGAGAGGGCAGTATTGCAATTTACGACGGCGAATTCGCAACTG GGGGCGTCGAGCCCGTCTTGGGCCAATCATCACATTGAGAGTACCTCTTCTGAAGGAGTCTGCTAATAGGTCCTCTGCTCAAGATCTTTAAGGCCAAA GTTAGAGGGGGACACTTGATCTCTTTTACGGTCATCTGGACGAAATGTTCTTCCATCAATGGAAAGCTCGCTTATAAGTGGGGTGCGAACGGCAACTG GTAGAGCTTGCTTGCAAACCTGGCACTTTTCACATAGCGACTTCTTGGCGCATTGGTAGGACAACTGTAGATGCACGTAGATAAAGCCTCAAAGGGAA GGACAACGCTTAGTTCGGGCGAGCGAGATCTCATGGCATTTCAAGTGATACAAGCTCAGACATTATGAAGACAATTGGGTTCAAAGCGTGGCGGACTA GTTTCTATGCCTAATCTATTCCATGTAGTTATGCGTCTTGCCTAATGGGATACTCGATTACCTAGAAGATTGTGGAATCGGCCCACATAAAAGGCGGA ATTGATTTCATCGGTTTAGCTACCAGCTGCAGCCGTCTTGTCAACGAAGCCCTCAAAAGACCAAGACAGACAAGGCAATCAGTCTAAGCCTCGCAGAC GGTATAGATTTAAGATTTAAAGTGACCGCCGTACTTTAGCCGTGATCACCAACAGCAAAGTGCGCGTTAGGATCCGTCTGGCCGTCAACTGTTATCCA TTGAGTTCTTGGACCCATAGACCGGTAACCCACCTTCGTCAATTCATTTTGGGGAGACCTGACTTAACGAAATTATAGCATATGGTAGTCATACGCAA ACAGTAATGAGAAACCGGACTTTAATAAGCTAAGAATTACTAGACACCGCATCGCTGCGACGGACTATGAGTATTTGTACATCTGCGTGCGAGGAGTT GTATAGTAGCAGGTGCATGACAGCGTAGTCTCTCAACCATGTTAACATCTGGAGTAGTAGAGAGCTCCCCGAGGGTGCTATCCCAAAGAGTCCATTAT"]
>>> 
>>> pattern = "GGACTGT"
>>> print(distanceBetweenPatternAndString(pattern, dna))
6
>>> 6
6
>>> >>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x!= y:
			ham += 1
		return ham
	
SyntaxError: invalid syntax
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		def hammingDistance(p, q):
			ham = 0
			for x, y in zip(p, q):
				if x!= y:
					ham += 1
				return ham

			
>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
			distance += hamming
			return distance

		
>>> dna = ["ATCTAAGAGGTTGAAACTGACAAACACTGGTCAAAGATCGTATGAATCAATCCGAGTGGTCAACCGTGGCGCTCTCGACTGGTTCGGCCGATGGCTTT", "TTCGCAGCCGTTGGGTCTCAGAACCCCGGGGGGTAAACGGATCGCCTGGAAACCGCGAGACCATGGCGTGAGTACGACAAACGTTACTGACCCGTGAG", "CAGGGACAGCTATGAGTGGAGCCCCGTAGGCTATCTGTCGACATTTTTTGTCAGAGGTGGTCTTCTCTTCAATATTCGGGAATAAAGCGGAGAATTGG", "CCTCCCAGTACCAGCTTTGGGATCTTGAAGATGGGTCGTCCGTTATAAAATAGGCCCGCTTAGGTGGAATATACTTATCCGACGCCGTGCATTCGCTG", "GCTTTTCATAACCAAGAAGTTTGGAGCGGCGGACGTCGGGCCCAACAAGTCGCCACCGTCTCGGCGAATAATAACGAGGATTAATACGCCCAGTCTAT", "GGGACGAGCCGCCAGTTTCACTCCATTGTCGTTGTACAAGAATCCCAGTGTGTCAGTAAACGGCTAGTCTATATTATTCAGTCATCTTCCATCTCCGT", "GACCGGAGGGCCACGAGGAACTTCGCAAACGCGCTCCTTACTCTGGTATACAGCACAGTCTAGCCGGGACACTAGTGCTGGAACGCTTCGCAGAGTTT", "CAGGCCAGGGAGATTAGTAAGTAATATAGATGTTCTTGGCCCTGGTACGCACCTTTGAGCACTGTAGAAGTTCGATACATACCCGGTTGATGGGCCCA", "AGACACTTCCTATTGAAGTCCCCCGGAGTACATGGCCAGGTAGCGAGTTTAGTAGAAGCCTCCCGTTCGACACTACAACACGGTCTAAGTCTCAGCGT", "GAACAATAAGGTGCCGCAGACCTAACGGGATACCTCATATAGTATCCCCTTATGGAGGCTGGGCGGAAACCCTTTCCCCCATGTCCCGGCGGTGCCGC", "GCACTTCAAGCATTCAGTCCAGTCCACAGGAATACAAGGTCGATGGCTAACTTCCTGTCCAGTGAAGGTTGCAGGTAGTATGCTATATTGAGCGCCGA","GCACTGGCAAGGACGAGCCCATGCTATCTAAAACGATGGCCTAGCCACAAGATGGGACCTTGAGACTCGAACGTACTTTCCGTGAATATTTACACGAT", "GTGCTACAGTCTAGCGCCCATCCCTAGTGTGCGACTTCGAAACGCTTGTCCAACGTATGTCTTAGGAGGTCGGGACATTCTACTCCTGCTAAAAACCA", "ATAGCTTTTGTAATATGAGCGCTGGCGTAAGACAGTTTCTTGGACAAGGGGTGCCGAACGTCCATGTTTGGGAATCAAAGAGAGTAAAATTACCAAGA", "AAGGTACGTGTGGCCTATCTCCTAATCCGTGCACAGAAGCGTAGCACGAACGGCTCAACGTACCCGCGTAGGCGCGTAATGGAAATGCCCGACACATG", "AGTTCAGCTTTCAGCGGTCTATAGCTAGAATTGCGCTTAGGCGATTTTGTTCATCCTACCGCAATCCCGTGGTTTGACGCGTCTATGTCGGCGCACTT", "TAGCACCCGCTGCGACAGTCCTCTTCAAGGTATTGGGTCATAAGGGGTACCGTCTAGGAGTGCGAACTTGGGGGGTTAGCCAGGGGGGAGGGAACCCC", "ATCCGCGACTTATATACCGTCTGCGCCTAAGTTGACGCGAGGGGGTTCCGTGGATAGGGGTGTGGCTTGAGAAAACTGAAAGTAACCATGTTAAACCA", "CACGGTAAATAACGGGTACAAATCTCAATCCAACTGTGTTAGATATCTACACCGCCGAGAGGGCAGTATTGCAATTTACGACGGCGAATTCGCAACTG", "GGGGCGTCGAGCCCGTCTTGGGCCAATCATCACATTGAGAGTACCTCTTCTGAAGGAGTCTGCTAATAGGTCCTCTGCTCAAGATCTTTAAGGCCAAA", "GTTAGAGGGGGACACTTGATCTCTTTTACGGTCATCTGGACGAAATGTTCTTCCATCAATGGAAAGCTCGCTTATAAGTGGGGTGCGAACGGCAACTG", "GTAGAGCTTGCTTGCAAACCTGGCACTTTTCACATAGCGACTTCTTGGCGCATTGGTAGGACAACTGTAGATGCACGTAGATAAAGCCTCAAAGGGAA", "GGACAACGCTTAGTTCGGGCGAGCGAGATCTCATGGCATTTCAAGTGATACAAGCTCAGACATTATGAAGACAATTGGGTTCAAAGCGTGGCGGACTA", "GTTTCTATGCCTAATCTATTCCATGTAGTTATGCGTCTTGCCTAATGGGATACTCGATTACCTAGAAGATTGTGGAATCGGCCCACATAAAAGGCGGA", "ATTGATTTCATCGGTTTAGCTACCAGCTGCAGCCGTCTTGTCAACGAAGCCCTCAAAAGACCAAGACAGACAAGGCAATCAGTCTAAGCCTCGCAGAC", "GGTATAGATTTAAGATTTAAAGTGACCGCCGTACTTTAGCCGTGATCACCAACAGCAAAGTGCGCGTTAGGATCCGTCTGGCCGTCAACTGTTATCCA", "TTGAGTTCTTGGACCCATAGACCGGTAACCCACCTTCGTCAATTCATTTTGGGGAGACCTGACTTAACGAAATTATAGCATATGGTAGTCATACGCAA", "ACAGTAATGAGAAACCGGACTTTAATAAGCTAAGAATTACTAGACACCGCATCGCTGCGACGGACTATGAGTATTTGTACATCTGCGTGCGAGGAGTT", "GTATAGTAGCAGGTGCATGACAGCGTAGTCTCTCAACCATGTTAACATCTGGAGTAGTAGAGAGCTCCCCGAGGGTGCTATCCCAAAGAGTCCATTAT", "CATTAACTTAATGGTTCTTACCTGCGAGATGATTCCTGCAATAAGTAGTGTCCGACTTGGTTTTTTTAATAAGATGCTCCTAGCTGTGGACCAAACGC"]
>>> pattern = "GGACTGT"
>>> print(distanceBetweenPatternAndString(pattern, dna))

Traceback (most recent call last):
  File "<pyshell#51>", line 1, in <module>
    print(distanceBetweenPatternAndString(pattern, dna))
  File "<pyshell#48>", line 10, in distanceBetweenPatternAndString
    distance += hamming
TypeError: unsupported operand type(s) for +=: 'int' and 'NoneType'
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1

			
>>> 
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
		return ham

	
>>> def distanceBetweenPatternAndString(pattern, dna):
	    k = len(pattern)
	    distance = 0
	    for x in dna:
		    hamming = k+1
		    for i in range(len(x) - k + 1):
			    z = hammingDistance(pattern, x[i:i+k])
			    if hamming > z:
				    hamming = z

				    
>>> def distanceBetweenPatternAndString(pattern, dna):
	    k = len(pattern)
	    distance = 0
	    for x in dna:
		    hamming = k+1
		    for i in range(len(x) - k + 1):
			    z = hammingDistance(pattern, x[i:i+k])
			    if hamming > z:
				    hamming = z
				distance += hamming
				
  File "<pyshell#78>", line 11
    distance += hamming
                      ^
IndentationError: unindent does not match any outer indentation level
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1

			
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
		return ham

	
>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
			distance += hamming
		return distance

	
>>> dna = ["ATCTAAGAGGTTGAAACTGACAAACACTGGTCAAAGATCGTATGAATCAATCCGAGTGGTCAACCGTGGCGCTCTCGACTGGTTCGGCCGATGGCTTT", "TTCGCAGCCGTTGGGTCTCAGAACCCCGGGGGGTAAACGGATCGCCTGGAAACCGCGAGACCATGGCGTGAGTACGACAAACGTTACTGACCCGTGAG", "CAGGGACAGCTATGAGTGGAGCCCCGTAGGCTATCTGTCGACATTTTTTGTCAGAGGTGGTCTTCTCTTCAATATTCGGGAATAAAGCGGAGAATTGG", "CCTCCCAGTACCAGCTTTGGGATCTTGAAGATGGGTCGTCCGTTATAAAATAGGCCCGCTTAGGTGGAATATACTTATCCGACGCCGTGCATTCGCTG", "GCTTTTCATAACCAAGAAGTTTGGAGCGGCGGACGTCGGGCCCAACAAGTCGCCACCGTCTCGGCGAATAATAACGAGGATTAATACGCCCAGTCTAT", "GGGACGAGCCGCCAGTTTCACTCCATTGTCGTTGTACAAGAATCCCAGTGTGTCAGTAAACGGCTAGTCTATATTATTCAGTCATCTTCCATCTCCGT", "GACCGGAGGGCCACGAGGAACTTCGCAAACGCGCTCCTTACTCTGGTATACAGCACAGTCTAGCCGGGACACTAGTGCTGGAACGCTTCGCAGAGTTT", "CAGGCCAGGGAGATTAGTAAGTAATATAGATGTTCTTGGCCCTGGTACGCACCTTTGAGCACTGTAGAAGTTCGATACATACCCGGTTGATGGGCCCA", "AGACACTTCCTATTGAAGTCCCCCGGAGTACATGGCCAGGTAGCGAGTTTAGTAGAAGCCTCCCGTTCGACACTACAACACGGTCTAAGTCTCAGCGT", "GAACAATAAGGTGCCGCAGACCTAACGGGATACCTCATATAGTATCCCCTTATGGAGGCTGGGCGGAAACCCTTTCCCCCATGTCCCGGCGGTGCCGC", "GCACTTCAAGCATTCAGTCCAGTCCACAGGAATACAAGGTCGATGGCTAACTTCCTGTCCAGTGAAGGTTGCAGGTAGTATGCTATATTGAGCGCCGA","GCACTGGCAAGGACGAGCCCATGCTATCTAAAACGATGGCCTAGCCACAAGATGGGACCTTGAGACTCGAACGTACTTTCCGTGAATATTTACACGAT", "GTGCTACAGTCTAGCGCCCATCCCTAGTGTGCGACTTCGAAACGCTTGTCCAACGTATGTCTTAGGAGGTCGGGACATTCTACTCCTGCTAAAAACCA", "ATAGCTTTTGTAATATGAGCGCTGGCGTAAGACAGTTTCTTGGACAAGGGGTGCCGAACGTCCATGTTTGGGAATCAAAGAGAGTAAAATTACCAAGA", "AAGGTACGTGTGGCCTATCTCCTAATCCGTGCACAGAAGCGTAGCACGAACGGCTCAACGTACCCGCGTAGGCGCGTAATGGAAATGCCCGACACATG", "AGTTCAGCTTTCAGCGGTCTATAGCTAGAATTGCGCTTAGGCGATTTTGTTCATCCTACCGCAATCCCGTGGTTTGACGCGTCTATGTCGGCGCACTT", "TAGCACCCGCTGCGACAGTCCTCTTCAAGGTATTGGGTCATAAGGGGTACCGTCTAGGAGTGCGAACTTGGGGGGTTAGCCAGGGGGGAGGGAACCCC", "ATCCGCGACTTATATACCGTCTGCGCCTAAGTTGACGCGAGGGGGTTCCGTGGATAGGGGTGTGGCTTGAGAAAACTGAAAGTAACCATGTTAAACCA", "CACGGTAAATAACGGGTACAAATCTCAATCCAACTGTGTTAGATATCTACACCGCCGAGAGGGCAGTATTGCAATTTACGACGGCGAATTCGCAACTG", "GGGGCGTCGAGCCCGTCTTGGGCCAATCATCACATTGAGAGTACCTCTTCTGAAGGAGTCTGCTAATAGGTCCTCTGCTCAAGATCTTTAAGGCCAAA", "GTTAGAGGGGGACACTTGATCTCTTTTACGGTCATCTGGACGAAATGTTCTTCCATCAATGGAAAGCTCGCTTATAAGTGGGGTGCGAACGGCAACTG", "GTAGAGCTTGCTTGCAAACCTGGCACTTTTCACATAGCGACTTCTTGGCGCATTGGTAGGACAACTGTAGATGCACGTAGATAAAGCCTCAAAGGGAA", "GGACAACGCTTAGTTCGGGCGAGCGAGATCTCATGGCATTTCAAGTGATACAAGCTCAGACATTATGAAGACAATTGGGTTCAAAGCGTGGCGGACTA", "GTTTCTATGCCTAATCTATTCCATGTAGTTATGCGTCTTGCCTAATGGGATACTCGATTACCTAGAAGATTGTGGAATCGGCCCACATAAAAGGCGGA", "ATTGATTTCATCGGTTTAGCTACCAGCTGCAGCCGTCTTGTCAACGAAGCCCTCAAAAGACCAAGACAGACAAGGCAATCAGTCTAAGCCTCGCAGAC", "GGTATAGATTTAAGATTTAAAGTGACCGCCGTACTTTAGCCGTGATCACCAACAGCAAAGTGCGCGTTAGGATCCGTCTGGCCGTCAACTGTTATCCA", "TTGAGTTCTTGGACCCATAGACCGGTAACCCACCTTCGTCAATTCATTTTGGGGAGACCTGACTTAACGAAATTATAGCATATGGTAGTCATACGCAA", "ACAGTAATGAGAAACCGGACTTTAATAAGCTAAGAATTACTAGACACCGCATCGCTGCGACGGACTATGAGTATTTGTACATCTGCGTGCGAGGAGTT", "GTATAGTAGCAGGTGCATGACAGCGTAGTCTCTCAACCATGTTAACATCTGGAGTAGTAGAGAGCTCCCCGAGGGTGCTATCCCAAAGAGTCCATTAT", "CATTAACTTAATGGTTCTTACCTGCGAGATGATTCCTGCAATAAGTAGTGTCCGACTTGGTTTTTTTAATAAGATGCTCCTAGCTGTGGACCAAACGC"]
>>> pattern = "GGACTGT"
>>> print(distanceBetweenPatternAndString(pattern, dna))
6
>>> dna = ["AGGATAGCCGGATCGTGCTGCTACTTGCCCGCTATCCTAGCGTCCGGGCCCTGAGGTCACGAAAAATCGAAGGTTACACAATAAATAGGTTGGAGCGGGCCCCGA", "AGCGCATGAGGGAAGTCTGTGCCAAGCCCCGAATCTACCGATCAAGCTCACTGACCTCGCACGCTTTTTGTCGACACCCAATCGAGTCTTGACCTAGACTGCGAG", "GTATCAGACAGGGGGTACTCGTAATGTTACCGTTCGTACTATAGCGATACTATTAGAGTTGCTAGGTGATCAGGCGTTCATCCAACCAGAGAGGCGCCCCCCGAA", "TCCCTAAGCGTGATCTCATGCCTAAGTATAGCTCCTGGGGCACAGGCGGGTTTCGCAGGCGTCAAACCGCCCCACTCTAATTGTTGAGTTCATTCCATCCTTCAG", "AACGACCATCAAATGCGCTAATGTACATTTTTAAAGGCCTCTTAGATGAGCAGTCCAACTCTATATGAGAAAGAACACTAAGCTGGCACCAGGACAAGAAGGTTA", "ACTATACGAGGTAGCACAGAGTTACCCGCTAAGGCGATCCGTTACTCCTCACACGTGGCTATTATAGAGCAGCGATCGCTCTCGGTGTTTCCAGGTTGCCCCAGT", "AAGAGCCAAATAGCTTAGATCACATTATACCTGCTGTTTGGAACCTCGGGCCACACCCTGAAACCTACTTAATATTCATTGACGCCTGGTACTGAAACCAGAAGA", "ACCCATGCTGCGAGTCCATAAATGCACAGATGTCCCGAAATTGAAGTTCACAGAAGTCAAGCCCCGTTGGGTGCCCCTTTCTAGAGCGCAGCTTAAGGTGCCACA", "ACGCCGGGCAACAGGAGGACGAGGAGTACCGTACTCAGTCATTCCAAATATCGGTTCAAGGAGGAGTCTGCGAGCAAAACGCTTTGAGGAGTTAGCTTATGCGGG", "TTTTATTAAGGATGTCAGAAGCTACAAAAGGATATGTTCATAGGCTTTTTTCGGAGCAGGCCAGCCAATTGAGGATTTCTACTCCACCAAAGCCCGTAGAAAAGC", "GACGCCAAGACTAGCGCTAAGCCCGTTCGCCGGCCACGGGCCGTGTACCACTTGCCACCGGAACTAAAATAGATTCTGAGTCCAAGTGCTCCTTACAGTCTTTGT", "CAGAAAGTATTGCGCTTCATGAGTGATGAAGACGCAACTGCATGGTCAGCTGGTAAATCGGTTACTATTATGCAGTTTCAGTGGATCGACGGGTTCTCCTGGATA", "CCCTCCAGAGCGTAACATCAGATGCACGCCGATTACCTATAGAACCATAGGAAGGTACACGATTTCCGCGCAAGAGTGGTATAGCACTCACAGGTCCAGTGAGGA", "GTGTCACGATAGAGGTCTGACTTATACCATCATAAAGAGCGGCATAATGTTTATGGTTGCACTCGTTGAGCGCATTTGCCTCGTCGATAGATACCGAAGAAGGAC", "GGAGGAATAAGGTACGCGAAAGCAGTGGGCGCACCCGTTAGGGTAGTTGAGCTACAAATAGCACTTGCGCTCTAAGAAGGCTTGGTGAAAGCGGTTTACACCTAA", "GTTTCTGTACCCTCACTGGCCAACATCTGAGCTACAGAACTCTGGTAACGGTATATGGAGATAGCTCCGTTCGACAATCGGCTCTAGCACACTGGCATCAGATTT", "ACGCAGTTCCTGCTTCCTTATTCACTTAGTACTGGCGCGCTCGTTTCCGCACGGGGCCGTATATGATGCTGACCGGGTTTCGTGTATACGAAACAGAAGATCATT", "CCACGAATAGAATTACTTAAAACATAGTTAGCTTTAGACTTTATCATTGTGATCATGAACAAAGTGTCTGCTAATACTGCGAAGTGCCACTGGTGAATGTGGTTC", "AACTCACGTAGAACTATCCTGACAACACTCTGTCCTCCTGTTCCCCTTCTCCTCGCTTTGGGAAGAGGGTCAAGTGCATAATCAGGAAAGCCATCGTCGATGTGA", "GCATTTGGTCTGCCAACGTAGAGAGAGGTGCGCATTAGAATACGGTATAGCTAAATAACATTCGCTGTCTCATGCTAGTTACGTCGTCTCTTCACGATCTCGTCG", "TCCTAACGACAGCGCTTAAACTGCGTAATAAGCCACGTATTCTTTTCTCCCCAGTGAATGAAGGGCCACTTTTCAGGCGCGTCCCCACTTAACGAAAGCTTTAGG", "TCGCTCTAACCAACTTTGGAGATATCTGGCCAGGATAGAAATATGCTACGCAAGCTGACCAGTCCCGTACATGAACTGAATATGTTATCCTGACAACACAGGTTT", "CTCGCGATTTGTAGCAACCGGGTCAAAAAGGGATCATGGCGGTTTCTATGCCATTCAAGGCATTTTGACTCGTAATAAAGAATACGCCGAAATAGTGGATTAGCG", "ACCTAGTAATTCCGGATTAGCTTCGTAGCAAACCCGATCTGCACAGACGGCTTGGCGGGCATGCAGCTAGGGACTGCCTCCATGCACCCTACCTGATTTCTCTTA", "ACTCAAAAATAACAAGATAGTGGGGGCAAGACGGGAGCAGCGGCAACTACTCACATCTAATCTGCGAGGACAACGAGTAGCAGGTAGACAAGAACACAAACAACT", "GCGTATGATGATATAGGGATTAGCGAGCGAAAGCGTTTTGCATTACTCTACTTTTTTCACACCTACCTCACAGGGGCACTTTTGCGCCGTCAGGGCCCTACGTTA", "CGGTTCCGGGGATGCACCAAAAACCACCTCGTTCTCAAAATGCAGGACGGATCTATTCTCGACCACCTCTAGAATATAACGCACGGTAGAGCTAGCCTGCAGAAG", "GATCTCCTCTCCCTCCCGCATGTCCCATCTCTCGCATAGGCGAAGGGTTCGCCTTCATCCTGCCAATGGTAACGCGCAACAAATGTCAGGCGTACGTTATTCGTA", "TTAATGAACCAACAAATTCGTTTCCTAGTTGGACGCGGTCGGGCAAAGATGGCCCCAATTGGGCGCTAGGGTTAACTCGTGTGAACAAAGGCCAAGTAATACGTC", "CGGGCACTACCAGACTGCGACGCCTCACCCAGATTGAGAGTGACTATGTGATATAGTATTGAATTCTCTTGAGCCTCAGCGAATTTGTAACGGGATCAACCAATG"]
>>> pattern = "TGTGC"
>>> print(distanceBetweenPatternAndString(pattern, dna))
4
>>> dna = AAA

Traceback (most recent call last):
  File "<pyshell#108>", line 1, in <module>
    dna = AAA
NameError: name 'AAA' is not defined
>>> dna = ["AAA"]
>>> dna = ["TTACCTTAAC", "GATATCTGTC", "ACGGCGTTCG", "CCCTAAAGAG", "CGTCAGAGGT"]
#
>>> dna = ["TTACCTTAAC", "GATATCTGTC", "ACGGCGTTCG", "CCCTAAAGAG", "CGTCAGAGGT"]
>>> pattern = ["AAA"]
>>> print(distanceBetweenPatternAndString(pattern, dna))
10
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
		return ham

	
>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
	for i in range(len(x) - k + 1):
		z = hammingDistance(pattern, x[i:i+k])
		if hamming > z:
			hamming = z
		distance += hamming
	return distance

>>> dna = ["TTACCTTAACGATATCTGTCACGGCGTTCGCCCTAAAGAGCGTCAGAGGT"]
>>> pattern = ["AAA"]
>>> pattern = ["AAA"]
>>> print(distanceBetweenPatternAndString(pattern, dna))
50
>>> dna = ["TTACCTTAAC GATATCTGTC ACGGCGTTCG CCCTAAAGAG CGTCAGAGGT"]
>>> dna = ["TTACCTTAAC GATATCTGTC ACGGCGTTCG CCCTAAAGAG CGTCAGAGGT"]
>>> 
>>> 
>>> dna = ["TTACCTTAAC" "GATATCTGTC" "ACGGCGTTCG" "CCCTAAAGAG" "CGTCAGAGGT"]
>>> pattern = ["AAA"]
>>> print(distanceBetweenPatternAndString(pattern, dna))
50
>>> dna = ["TTACCTTAAC", "GATATCTGTC", "ACGGCGTTCG", "CCCTAAAGAG", "CGTCAGAGGT"]
>>> pattern = ["AAA"]
>>> print(distanceBetweenPatternAndString(pattern, dna))
10
>>> dna = ["CGTTAGAATGATTAGCACCCATACCAAAACTGGATGCATGAGATGGCCGCCCCGTCGAAGCTCCCTGATTCAGTCTGGCGTGAACTTAAGACACTCTAAC", "TTAGTTGTTAGACGATTATTCGGACGTCGAGTGCCCCCGCATCTGATCACACAATACGAAAACCAGACCCTACGTTGACGGCCGGAGGCGAGTGAACAGT", "CCCGAACTTTTATTGGCTTAGGTTCGCGCTAGTAGCCGCATACTCCGAACGTGTTCGTAGTCTTACAAGCCCGACAAACCAGTTGGCGAGCTTGGCAAGC", "ATTGTTAAACAACCTGATACCAAACGTCGGATTTCTATGATGAACTCGTGATATTATACCGTAATACATTACGAGGTCCTCATTATGTAGGGATTTATCC", "AGCGACGCCCGCAATTAAATGTCGTGCTTAAGCTTTAGGATTACCCTCTCAATCAGCGATAGCGTTTGTGAAACACACTGTCGGTCGTATCCGTCAGTGG", "TTACATTGATCTTATATCTGATGCCATACCCGCATTAAGCCAACCATCGGTTTGTGTGATGTAGAAATCGTGCAATATAATGACATCGGGCCCATGTCT", "ACGGTGATTAATAACACAGGGCAAGGCAGATGGGCACCTCCGCCTCAAAAGTCCAAGACAGTAGTGCCTTTTGTTAGAAGGTCGCATAAACCTACGAGCT", "CCGTGACGTGTCTGGGACGCGTTTAACTGAGACTCTAGTCACAAGTCGAAGCACGTCAGTCATCATTCAGGGGCACCATAGGTCGGACGCATGCGCCTGC", "GCAAAACGCAGCAATGGGCCGGCGATAGATTGTTTATCTAATGCTCTGGTGCTAGAAAGTCTGTAGTTCTGTGAGTGCCAAACCAATAAACATACCTGCG", "TAGCCGTACGGGCACTTCGCTTCCATGTTGCGTCAAACTAACGGCCGAAGCGCGAATCTCTGTGAGAAGACTCGGTACCGGTCTCTACCGTTACTCGGAC", "CGGTCTTCGGCTTTGTTGGGGGTAGCGTGACGAAGCTAAACAACCCGGCTAGAATAAGGGCGTGTAATGTTTATTAATCCTGGATCATTAATAGCGTCTA", "GTGTGAGTCATTGCTTAGGGACATCGGCTTCAAGTAGTTTAGAGTGAGTGGACTGTAACGAACCACATATTCCGGCGTCAACAGGAAGAACGGGACTTAT", "CTACTGCACCCAGATACCGGATGAGGGTGATACTTTAGCCAAACTCGGCAGAGGGAGTGAGCGGCGGATAACCCTGCTTAAGTGCTAGGGATGCACCAAA", "ACGGCCTTTACAATAACGCAATATGGCAACTAGAATCACTCAGGCATCCGGGCATCTTTGGAGAGGTCGCGCCAACTCATGCAGTCCTATTCAAGAAGCA", "CATGTAGATACACATTGTGTCGTATATTACCTCCAAGACGCTAAGGATAATGCCAGTGAATTCTCATACTCCCGCATCGGCGGCTCGAGCTTGTAATTCA", "CCTGGATGTTCACCTCGACGGGCCTGCAGTCCTGGATCTTATGATAGTTGGGTCTGCCTCAGTCTCCAGATTAGGATTTCTTGATTGTTACCCCTAATTA", "ACAAACATTCTTAGAAAGTTAAGTGGGTTTCGCCCCCCCTGATTGGTAGTAAACTTTTCCAACTTCGTTAATTCGCGGGTCAGGTGGCGTTTTTTTGGTT", "GCTGCTTGCGTATGCAAGGCCTAGGCGTAGGGGGCATATTGGATTGGTACAATAGTCAGTTCGCGCTTCATGGACATGCATCAACTCCGCACTCGCACAT", "CTTGTATGAAAGTATACCTCGTGTGCTACGAAGTGCGAACCCCCTGCAAATATTCGCAGCATAACGGAGCGTCGTAGGGAATATGGAGTCACTACAGGAT", "TCTTACAGTGCCTTGCTAGACGTTAGGCACATAAAGGCTCTCCTTAGGCCCCGTGTATACCGGGTTGACCAAGCGGGTTCGTCACTACGGCCGTCTCATG", "TCATCGTTGAAAGGCGCAGGTCCAACGGAACAGAGATTCATATCGCGGGGTTACTGACGTTTCTCGTCCCGAACACCCAACTCCTGCCGTTATCTCAATA", "AAATGCTGGTACACACGCCTTGCATACGACTGCAACAATGGTTGGTACGACGCCACGTTCTGCGGGTCTCTTCGCCTCTGGGTGTCCCATTTCTCGGACC", "TCAAGGTGGAGTAACACATGGATATGATTCTGTATTGCTTACCCAACTCTCGTCTTTTATCAACAACGAATCTACTTTGCCTGAGGTCTAATATTGCGAC", "TCGCGAGGGTCCTGTGGGAAATTCCAGTGGGTCTTGTGATCTTGCCGTTGCTTCAGACTCTCTAGTAAGAGCCACCGCAGCCCAGTGTGGGACCAACGAC", "CACACTGTATTGCGTGACATTGCCTATTGCCAGAAGATATGTTCTACCCCAGCGTTGCATTTAGTGTGCGCTCCGCCTGTAGGATATGACACGTGGGGTA", "TCAAGCACAGGGGTGAAGTGGTCCATCGGGTACGTCTTGTCAATGTAACTACGGCGCCGAGTAAGTAACGCGCAATAGTGAGACGAGGACCTCCCGACTT", "AGTCGAAACCTGCTCGGAGCGCCTTTGTATTCTGCTTTCTGTACGAATCTGGTAGCGGGTGCCTATCGCACAGCCAGCTTGTGCAATCCTGTGGGGCAAC", "TTTAGCCTAACTGTCTATATCGGTGTGGCTTAGCACAAACGGGTTTCCTTGCTATCTTATCCTTATAGGCGCGAAGTTTTAGCGCATTAGTCCAGTTTAG", "TGCCCCTTCTTCAAGCTACAGCCAGGGCTCGTGCCGAAGCTCCATCCGTAAGTCTTTGTGCATCAGTGCCTCTCCTAATCAGGCTAATGCGTGCCAAGCT", "CTCCGTTCAAAGGGGCGCAAGTGGGGGATCGGAATTCACAACAAGGTCGTGTTCAAGCCAGAAGTGTGGGGCGCTAACTCACCGGATGGCAGTATCTGCT"]
>>> pattern = ["GTTATTC"]
>>> print(distanceBetweenPatternAndString(pattern, dna))
100
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
		return ham

	
>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
			distance += hamming
		return distance

	
>>> def numberToPattern(x, k):
	if k == 1:
		return numberToSymbol(x)
	return numberToPattern(x // 4, k-1) + numberToSymbol(x % 4)

>>> def numberToSymbol(x):
	if x == 0:
		return "A"
	if x == 1:
		return "C"
	if x == 2:
		return "G"
	if x == 3:
		return "T"

	
>>> def medianString(dna, k):
	distance = (k+1) * len(dna)
	median = ""
	for i in range(4**k):
		pattern = numberToPattern(i, k)
		z = distanceBetweenPatternAndString(pattern, dna)
		if distance > z:
			distance = z
			median = pattern
		return median

	
>>> dna = ["AAATTGACGCAT", "GACGACCACGTT", "CGTCAGCGCCTG", "GCTGAGCACCGG", "AGTACGGGACAG"]
>>> dna = ["AAATTGACGCAT", "GACGACCACGTT", "CGTCAGCGCCTG", "GCTGAGCACCGG", "AGTACGGGACAG"]
>>> k = 2
>>> dna = ["AAATTGACGCAT", "GACGACCACGTT", "CGTCAGCGCCTG", "GCTGAGCACCGG", "AGTACGGGACAG"]
>>> k = 3
>>> print(medianString(dna, k))
AAA
>>> dna = ["TGCGAAGGTGATGAACTGCATAAGTAGGAAAGTAAGTAACAC", "TTGGGGCATAATTGCAACGTGAGGAGCGGCGAGTCGCTGATG", "GTAACTAAGATTCATAATTGTGGCTGGGCCTCTAAGTGCGGG", "TGGGTCTAGCCGCGCTACGAGCCGGCAGAACATAAAGGGTAA", "CATAATGAGATGTCGCTGAATCCATTTGATCGCAGTCTGATC", "TAAATCCACCTGATGGGTTTGTTACATAAACCACGCCCGGCA", "GACAGGCCACCTTACTTTCATAAATCTTACGTCTCAAGTACG", "TGGTTACTTTTCCCTGATCGGTCGTAATGGCATAACCCAACC","GCTCCTCAATTAGAATATTCAATTCATTGCAACCGTCATAAT", "CTGCCCACTCCATGTAGAATGTCCACACTAAGCGTACATAAG"]
>>> k = 6
>>> print(medianString(dna, k))
AAAAAA
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
		return ham

	
>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
			distance += hamming
		return distance

	
>>> def numberToPattern(x, k):
	if k == 1:
		return numberToSymbol(x)
	return numberToPattern(x // 4, k-1) + numberToSymbol(x % 4)

>>> def numberToSymbol(x):
	if x == 0:
		return "A"
	if x == 1:
		return "C"
	if x == 2:
		return "G"
	if x == 3:
		return "T"

	
>>> def medianString(dna, k):
	distance = (k+1) * len(dna)
	median = ""
	for i in range(4**k):
		pattern = numberToPattern(i, k)
		z = distanceBetweenPatternAndString(pattern, dna)
		if distance > z:
			distance = z
			median = pattern
		return median
	
SyntaxError: invalid syntax
>>> def medianstring(DNA,k):
	distance = len(DNA)+1
	for i in range (4**k - 1):
		pattern = numbertopattern(i,k)
		w = distanceBetweenPatternAndString(pattern, dna)
		if distance > w:
			distance = w
			median = pattern
		return median
	k = 6
	DNA = ["TGATAAGTGTTCTCCTTAACCGACGCCGAATACCTTCGATGT"
"TGCTTAGACTACAGATTTCTAACAACATCTAGGATGGCATAG",
"GAAATGAACGCCTGATCTGGGATGTTCTTAACGTTTGTTGGG",
"ACCCGTGCTGGTAACAGTTACCGGGGGGCGTTCTATTGCTTA",
"TTCTTAACTGCCATACTGTTCTGTCACAATCAGTAGATTCTA",
"TTCCCCAAGTGGTATCCATTCTTAAAAGAAAGCCAAGGGTTG",
"CACACAAAGTTGAGCCCTAAGCTGAATGAGTAATAATTCTTA",
"GATCACTAGCTGTGAACCATCATGAGCTTTGATCGGTCCTTA",
"GGCACTTACTTAAACATGGCTACGCTTTCCCTGAGTGGCGTT",
"AGGTGAGTTGCGTCGATGTCCTTAATATGGAAGCGAGAGGCC"]
	print(medianstring(DNA,k))

	
>>> print(medianstring(DNA,k))

Traceback (most recent call last):
  File "<pyshell#226>", line 1, in <module>
    print(medianstring(DNA,k))
NameError: name 'DNA' is not defined
>>> def medianstring(DNA,k):
	distance = len(DNA)+1
	for i in range (4**k - 1):
		pattern = numbertopattern(i,k)
		w = distanceBetweenPatternAndString(pattern, dna)
		if distance > w:
			distance = w
			median = pattern
		return median

>>> k = 6
>>> dna = ["TGATAAGTGTTCTCCTTAACCGACGCCGAATACCTTCGATGT"
"TGCTTAGACTACAGATTTCTAACAACATCTAGGATGGCATAG",
"GAAATGAACGCCTGATCTGGGATGTTCTTAACGTTTGTTGGG",
"ACCCGTGCTGGTAACAGTTACCGGGGGGCGTTCTATTGCTTA",
"TTCTTAACTGCCATACTGTTCTGTCACAATCAGTAGATTCTA",
"TTCCCCAAGTGGTATCCATTCTTAAAAGAAAGCCAAGGGTTG",
"CACACAAAGTTGAGCCCTAAGCTGAATGAGTAATAATTCTTA",
"GATCACTAGCTGTGAACCATCATGAGCTTTGATCGGTCCTTA",
"GGCACTTACTTAAACATGGCTACGCTTTCCCTGAGTGGCGTT",
"AGGTGAGTTGCGTCGATGTCCTTAATATGGAAGCGAGAGGCC"]
>>> print(medianstring(DNA,k))

Traceback (most recent call last):
  File "<pyshell#242>", line 1, in <module>
    print(medianstring(DNA,k))
NameError: name 'DNA' is not defined
>>> k = 6
>>> DNA = ["TGATAAGTGTTCTCCTTAACCGACGCCGAATACCTTCGATGT"
"TGCTTAGACTACAGATTTCTAACAACATCTAGGATGGCATAG",
"GAAATGAACGCCTGATCTGGGATGTTCTTAACGTTTGTTGGG",
"ACCCGTGCTGGTAACAGTTACCGGGGGGCGTTCTATTGCTTA",
"TTCTTAACTGCCATACTGTTCTGTCACAATCAGTAGATTCTA",
"TTCCCCAAGTGGTATCCATTCTTAAAAGAAAGCCAAGGGTTG",
"CACACAAAGTTGAGCCCTAAGCTGAATGAGTAATAATTCTTA",
"GATCACTAGCTGTGAACCATCATGAGCTTTGATCGGTCCTTA",
"GGCACTTACTTAAACATGGCTACGCTTTCCCTGAGTGGCGTT",
"AGGTGAGTTGCGTCGATGTCCTTAATATGGAAGCGAGAGGCC"]
>>> print(medianstring(DNA,k))

Traceback (most recent call last):
  File "<pyshell#245>", line 1, in <module>
    print(medianstring(DNA,k))
  File "<pyshell#239>", line 4, in medianstring
    pattern = numbertopattern(i,k)
NameError: global name 'numbertopattern' is not defined
>>> def medianstring(DNA,k):
	distance = len(DNA)+1
	for i in range (4**k - 1):
		pattern = numbertopattern(i,k)
		w = distanceBetweenPatternAndString(pattern, DNA)
		if distance > w:
			distance = w
			median = pattern
		return median

	
>>> k = 6
>>> ["TGATAAGTGTTCTCCTTAACCGACGCCGAATACCTTCGATGT",
"TGCTTAGACTACAGATTTCTAACAACATCTAGGATGGCATAG",
"GAAATGAACGCCTGATCTGGGATGTTCTTAACGTTTGTTGGG",
"ACCCGTGCTGGTAACAGTTACCGGGGGGCGTTCTATTGCTTA",
"TTCTTAACTGCCATACTGTTCTGTCACAATCAGTAGATTCTA",
"TTCCCCAAGTGGTATCCATTCTTAAAAGAAAGCCAAGGGTTG
"CACACAAAGTTGAGCCCTAAGCTGAATGAGTAATAATTCTTA",
"GATCACTAGCTGTGAACCATCATGAGCTTTGATCGGTCCTTA",
"GGCACTTACTTAAACATGGCTACGCTTTCCCTGAGTGGCGTT",
"AGGTGAGTTGCGTCGATGTCCTTAATATGGAAGCGAGAGGCC"]
SyntaxError: EOL while scanning string literal
>>> k = 6
>>> DNA = ["TGATAAGTGTTCTCCTTAACCGACGCCGAATACCTTCGATGT",
"TGCTTAGACTACAGATTTCTAACAACATCTAGGATGGCATAG",
"GAAATGAACGCCTGATCTGGGATGTTCTTAACGTTTGTTGGG",
"ACCCGTGCTGGTAACAGTTACCGGGGGGCGTTCTATTGCTTA",
"TTCTTAACTGCCATACTGTTCTGTCACAATCAGTAGATTCTA",
"TTCCCCAAGTGGTATCCATTCTTAAAAGAAAGCCAAGGGTTG",
"CACACAAAGTTGAGCCCTAAGCTGAATGAGTAATAATTCTTA",
"GATCACTAGCTGTGAACCATCATGAGCTTTGATCGGTCCTTA",
"GGCACTTACTTAAACATGGCTACGCTTTCCCTGAGTGGCGTT",
"AGGTGAGTTGCGTCGATGTCCTTAATATGGAAGCGAGAGGCC"]
>>> print(medianstring(DNA,k))

Traceback (most recent call last):
  File "<pyshell#266>", line 1, in <module>
    print(medianstring(DNA,k))
  File "<pyshell#261>", line 4, in medianstring
    pattern = numbertopattern(i,k)
NameError: global name 'numbertopattern' is not defined
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
		return ham

	
>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
			distance += hamming
		return distance

	
>>> def numberToPattern(x, k):
            if k == 1:
		    return numberToSymbol(x)
		return numberToPattern(x // 4, k-1) + numberToSymbol(x % 4)
	
  File "<pyshell#297>", line 5
    return numberToPattern(x // 4, k-1) + numberToSymbol(x % 4)
                                                              ^
IndentationError: unindent does not match any outer indentation level
>>> def numberToPattern(x, k):
	if k == 1:
		return numberToSymbol(x)
	return numberToPattern(x // 4, k-1) + numberToSymbol(x % 4)

>>> def medianString(dna, k):
	distance = len(dna)+1
	for i in range (4**k - 1):
		pattern = numbertopattern(i,k)
		z = distanceBetweenPatternAndString(pattern, DNA)
		if distance > z:
			distance = z
			median = pattern
		return median

	
>>> dna = "TGATAAGTGTTCTCCTTAACCGACGCCGAATACCTTCGATGT",
"TGCTTAGACTACAGATTTCTAACAACATCTAGGATGGCATAG",
"GAAATGAACGCCTGATCTGGGATGTTCTTAACGTTTGTTGGG",
"ACCCGTGCTGGTAACAGTTACCGGGGGGCGTTCTATTGCTTA",
"TTCTTAACTGCCATACTGTTCTGTCACAATCAGTAGATTCTA",
"TTCCCCAAGTGGTATCCATTCTTAAAAGAAAGCCAAGGGTTG",
"CACACAAAGTTGAGCCCTAAGCTGAATGAGTAATAATTCTTA",
"GATCACTAGCTGTGAACCATCATGAGCTTTGATCGGTCCTTA",
"GGCACTTACTTAAACATGGCTACGCTTTCCCTGAGTGGCGTT",
"AGGTGAGTTGCGTCGATGTCCTTAATATGGAAGCGAGAGGCC"]
>>> k = 6
>>> print(medianstring(dna,k))

Traceback (most recent call last):
  File "<pyshell#320>", line 1, in <module>
    print(medianstring(dna,k))
  File "<pyshell#261>", line 4, in medianstring
    pattern = numbertopattern(i,k)
NameError: global name 'numbertopattern' is not defined
>>> def medianString(dna, k):
	distance = len(dna)+1
	for i in range (4**k - 1):
		pattern = numberToPattern(i,k)
		z = distanceBetweenPatternAndString(pattern, DNA)
		if distance > z:
			distance = z
			median = pattern
		return median

	
>>> dna = "TGATAAGTGTTCTCCTTAACCGACGCCGAATACCTTCGATGT",
"TGCTTAGACTACAGATTTCTAACAACATCTAGGATGGCATAG",
"GAAATGAACGCCTGATCTGGGATGTTCTTAACGTTTGTTGGG",
"ACCCGTGCTGGTAACAGTTACCGGGGGGCGTTCTATTGCTTA",
"TTCTTAACTGCCATACTGTTCTGTCACAATCAGTAGATTCTA",
"TTCCCCAAGTGGTATCCATTCTTAAAAGAAAGCCAAGGGTTG",
"CACACAAAGTTGAGCCCTAAGCTGAATGAGTAATAATTCTTA",
"GATCACTAGCTGTGAACCATCATGAGCTTTGATCGGTCCTTA",
"GGCACTTACTTAAACATGGCTACGCTTTCCCTGAGTGGCGTT",
"AGGTGAGTTGCGTCGATGTCCTTAATATGGAAGCGAGAGGCC"]
>>> k = 6
>>> print(medianstring(dna,k))

Traceback (most recent call last):
  File "<pyshell#325>", line 1, in <module>
    print(medianstring(dna,k))
  File "<pyshell#261>", line 4, in medianstring
    pattern = numbertopattern(i,k)
NameError: global name 'numbertopattern' is not defined
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		 if x != y:
			 ham += 1
		return ham
	
  File "<pyshell#331>", line 7
    return ham
             ^
IndentationError: unindent does not match any outer indentation level
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
		return ham

	
>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
			distance += hamming
		return distance

	
>>> def numberToPattern(x, k):
	if k == 1:
		return numberToSymbol(x)
	return numberToPattern(x // 4, k-1) + numberToSymbol(x % 4)

>>> def numberToSymbol(x):
	if x == 0:
		return "A"
	if x == 1:
		return "C"
	if x == 2:
		return "G"
	if x == 3:
		return "T"

	
>>> def medianString(dna, k):
	distance = len(dna) + 1
	or i in range (4**k - 1):
		pattern = numberToPattern(i, k)
		z = distanceBetweenPatternAndString(pattern, dna)
		if distance > z:
			distance = z
			median = pattern
			
SyntaxError: invalid syntax
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
		return ham

	
>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
			distance += hamming
		return distance

	
>>> def numberToPattern(x, k):
	if k == 1:
		return numberToSymbol(x)
	return numberToPattern(x // 4, k-1) + numberToSymbol(x % 4)

>>> def numberToSymbol(x):
	if x == 0:
		return "A"
	if x == 1:
		return "C"
	if x == 2:
		return "G"
	if x == 3:
		return "T"

	
>>> def medianString(dna, k):
	distance = len(dna) + 1
	or i in range (4**k - 1):
		pattern = numberToPattern(i, k)
		z = distanceBetweenPatternAndString(pattern, dna)
		if distance > z:
			distance = z
			median = pattern
			
SyntaxError: invalid syntax
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
		return ham
def distanceBetweenPatternAndString(pattern, dna):
	
SyntaxError: invalid syntax
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
		return ham

	
>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
			distance += hamming
		return distance

	
>>> def numberToPattern(x, k):
	if k == 1:
		return numberToSymbol(x)
	return numberToPattern(x // 4, k-1) + numberToSymbol(x % 4)

>>> def numberToSymbol(x):
	if x == 0:
		return "A"
	if x == 1:
		return "C"
	if x == 2:
		return "G"
	if x == 3:
		return "T"

	
>>> def medianString(dna, k):
	distance = len(dna)+1
	for i in range (4**k - 1):
		pattern = numberToPattern(i,k)
		w = distanceBetweenPatternAndString(pattern, dna)
		if distance > w:
			distance = w
			median = pattern
		return median

	
>>> k = 6
>>> dna = ["TGATAAGTGTTCTCCTTAACCGACGCCGAATACCTTCGATGT",
"TGCTTAGACTACAGATTTCTAACAACATCTAGGATGGCATAG",
"GAAATGAACGCCTGATCTGGGATGTTCTTAACGTTTGTTGGG",
"ACCCGTGCTGGTAACAGTTACCGGGGGGCGTTCTATTGCTTA",
"TTCTTAACTGCCATACTGTTCTGTCACAATCAGTAGATTCTA",
"TTCCCCAAGTGGTATCCATTCTTAAAAGAAAGCCAAGGGTTG",
"CACACAAAGTTGAGCCCTAAGCTGAATGAGTAATAATTCTTA",
"GATCACTAGCTGTGAACCATCATGAGCTTTGATCGGTCCTTA",
"GGCACTTACTTAAACATGGCTACGCTTTCCCTGAGTGGCGTT",
"AGGTGAGTTGCGTCGATGTCCTTAATATGGAAGCGAGAGGCC"]
>>> print(medianstring(dna,k))

Traceback (most recent call last):
  File "<pyshell#394>", line 1, in <module>
    print(medianstring(dna,k))
  File "<pyshell#261>", line 4, in medianstring
    pattern = numbertopattern(i,k)
NameError: global name 'numbertopattern' is not defined
>>> def hammingDistance(p, q)
SyntaxError: invalid syntax
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1

			
>>> def hammingDistance(p, q)
SyntaxError: invalid syntax
>>> def hammingDistance(p, q)
SyntaxError: invalid syntax
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
		return ham

	
>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
			distance += hamming
		return distance

	
>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
			distance += hamming
		return distance

	
>>> def numberToPattern(x, k):
	if k == 1:
		return numberToSymbol(x)
	return numberToPattern(x // 4, k-1) + numberToSymbol(x % 4)

>>> def numberToSymbol(x)
SyntaxError: invalid syntax
>>> def numberToSymbol(x):
	if x == 0:
		return "A"
	if x == 1:
		return "C"
	if x == 2:
		return "G"
	if x == 3:
		return "T"

	
>>> def medianString(dna, k):
	distance = (k+1) * len(dna)
	median = ""
	for i in range(4**k):
		pattern = numberToPattern(i, k)
		z = distanceBetweenPatternAndString(pattern, dna)
		if distance > z:
			distance = z
			median = pattern

			
>>> def medianString(dna, k):
	distance = (k+1) * len(dna)
	median = ""
	for i in range(4**k):
		pattern = numberToPattern(i, k)
		z = distanceBetweenPatternAndString(pattern, dna)
		if distance > z:
			distance = z
			median = pattern
		return median

	
>>> dna = ["TTTAAGCCCTAGCTTGGTGCGGTTTCACCAGTATGGCCCACT", "TTTGATATGAAGATAGGCCGTATAATGGAGTACTAACCCTGG", "ATGACATGAACGCTACACGTATTACCCTTGAAAATGTCGGTA", "GCAAGGCCCTGGTTATCTGAATTTCTTCTGTCCTATCCTTTC", "CCCTTGGCGTAAAGCACGTCACTCAACGAGAAGCCTTAGTAT", "CCCTAGTGAGAATCCCTCAGAGTGTTTCATGTTATCCCAATA", "TTCCAATAAAGAACCGAAGACGATGAACACCCCTTGAATTGA", "CAACCGCCCTCGGCTGTGAGTGCAAATTGTTGAGATCTCTCT", "CCCTCGGCACAGGGGGACCCTCAATCACATAAGGCACGGATA", "CCCGAGCCCTTGAGACTCAACGCTACGACGGATGGAGAGACA"]
>>> k = 6
>>> print(medianString(dna, k))
AAAAAA
>>> dna = ["AATTAAAGCGGTCAACGCTTAGCACTTGCAACAGGTCGGATT","TATTGAAATGTTCAGAGCCCACCGCGGTAAATTACTACAGGT", "GGCACAGGTTTCCACATGACAGGGGAGCTTAGCCGCAATTAT","TGGCCGCTTGCAGGTTACCTGGTGACAGGTTATCGCAGCTGT", "GCAGAGACAGGTTGGCATGTCGTCATTTGGACTCCGCACCAA", "CAGTGTTGGGTAACAGGACCGCTGTTGTAAGGGCGGGGACTC", "ATATCTGATGCCGGCCAGACTCTCACAGGCGCTGCCAGCGTG", "ACAGGTACTAGTATCTTGCATGACCATATCCCAGGGGGGCCA","TTGGTTGCGGCCTATTGCGTCACACCTTTGAACATTACAGGA", "GCACACGTGTCCCCGGCAGAGGAAGAATGAACAGGAGCGGCT"]
>>> k = 6
>>> print(medianString(dna, k))
AAAAAA
>>> dna = ["TGATGATAACGTGACGGGACTCAGCGGCGATGAAGGATGAGT",
"CAGCGACAGACAATTTCAATAATATCCGCGGTAAGCGGCGTA",
"TGCAGAGGTTGGTAACGCCGGCGACTCGGAGAGCTTTTCGCT",
"TTTGTCATGAACTCAGATACCATAGAGCACCGGCGAGACTCA",
"ACTGGGACTTCACATTAGGTTGAACCGCGAGCCAGGTGGGTG",
"TTGCGGACGGGATACTCAATAACTAAGGTAGTTCAGCTGCGA",
"TGGGAGGACACACATTTTCTTACCTCTTCCCAGCGAGATGGC",
"GAAAAAACCTATAAAGTCCACTCTTTGCGGCGGCGAGCCATA",
"CCACGTCCGTTACTCCGTCGCCGTCAGCGATAATGGGATGAG",
"CCAAAGCTGCGAAATAACCATACTCTGCTCAGGAGCCCGATG"]
>>> k = 6
>>> print(medianString(dna, k))
AAAAAA
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
	return ham

def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
		distance += hamming
	return distance

def numberToPattern(x, k):
	if k == 1:
		return numberToSymbol(x)
	return numberToPattern(x // 4, k-1) + numberToSymbol(x % 4)

def numberToSymbol(x):
	if x == 0:
		return "A"
	if x == 1:
		return "C"
	if x == 2:
		return "G"
	if x == 3:
		return "T"

def medianString(dna, k):
	distance = len(dna)+1
	median = ""
	for i in range(4**k - 1):
		pattern = numberToPattern(i, k)
		z = distanceBetweenPatternAndString(pattern, dna)
		if distance > z:
			distance = z
			median = pattern
	return median

dna = ["TTTAAGCCCTAGCTTGGTGCGGTTTCACCAGTATGGCCCACT", "TTTGATATGAAGATAGGCCGTATAATGGAGTACTAACCCTGG", "ATGACATGAACGCTACACGTATTACCCTTGAAAATGTCGGTA", "GCAAGGCCCTGGTTATCTGAATTTCTTCTGTCCTATCCTTTC", "CCCTTGGCGTAAAGCACGTCACTCAACGAGAAGCCTTAGTAT", "CCCTAGTGAGAATCCCTCAGAGTGTTTCATGTTATCCCAATA", "TTCCAATAAAGAACCGAAGACGATGAACACCCCTTGAATTGA", "CAACCGCCCTCGGCTGTGAGTGCAAATTGTTGAGATCTCTCT", "CCCTCGGCACAGGGGGACCCTCAATCACATAAGGCACGGATA", "CCCGAGCCCTTGAGACTCAACGCTACGACGGATGGAGAGACA"]
k = 6
print(medianString(dna, k))
SyntaxError: invalid syntax
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
	return ham

def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
		distance += hamming
	return distance

def numberToPattern(x, k):
	if k == 1:
		return numberToSymbol(x)
	return numberToPattern(x // 4, k-1) + numberToSymbol(x % 4)

def numberToSymbol(x):
	if x == 0:
		return "A"
	if x == 1:
		return "C"
	if x == 2:
		return "G"
	if x == 3:
		return "T"

def medianString(dna, k):
	distance = len(dna)+1
	median = ""
	for i in range(4**k - 1):
		pattern = numberToPattern(i, k)
		z = distanceBetweenPatternAndString(pattern, dna)
		if distance > z:
			distance = z
			median = pattern
	return median

dna = ["TTTAAGCCCTAGCTTGGTGCGGTTTCACCAGTATGGCCCACT", "TTTGATATGAAGATAGGCCGTATAATGGAGTACTAACCCTGG", "ATGACATGAACGCTACACGTATTACCCTTGAAAATGTCGGTA", "GCAAGGCCCTGGTTATCTGAATTTCTTCTGTCCTATCCTTTC", "CCCTTGGCGTAAAGCACGTCACTCAACGAGAAGCCTTAGTAT", "CCCTAGTGAGAATCCCTCAGAGTGTTTCATGTTATCCCAATA", "TTCCAATAAAGAACCGAAGACGATGAACACCCCTTGAATTGA", "CAACCGCCCTCGGCTGTGAGTGCAAATTGTTGAGATCTCTCT", "CCCTCGGCACAGGGGGACCCTCAATCACATAAGGCACGGATA", "CCCGAGCCCTTGAGACTCAACGCTACGACGGATGGAGAGACA"]
k = 6
SyntaxError: invalid syntax
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
	return ham

def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
		distance += hamming
	return distance

def numberToPattern(x, k):
	if k == 1:
		return numberToSymbol(x)
	return numberToPattern(x // 4, k-1) + numberToSymbol(x % 4)

def numberToSymbol(x):
	if x == 0:
		return "A"
	if x == 1:
		return "C"
	if x == 2:
		return "G"
	if x == 3:
		return "T"

def medianString(dna, k):
	distance = len(dna)+1
	median = ""
	for i in range(4**k - 1):
		pattern = numberToPattern(i, k)
		z = distanceBetweenPatternAndString(pattern, dna)
		if distance > z:
			distance = z
			median = pattern
	return median

dna = ["TTTAAGCCCTAGCTTGGTGCGGTTTCACCAGTATGGCCCACT", "TTTGATATGAAGATAGGCCGTATAATGGAGTACTAACCCTGG", "ATGACATGAACGCTACACGTATTACCCTTGAAAATGTCGGTA", "GCAAGGCCCTGGTTATCTGAATTTCTTCTGTCCTATCCTTTC", "CCCTTGGCGTAAAGCACGTCACTCAACGAGAAGCCTTAGTAT", "CCCTAGTGAGAATCCCTCAGAGTGTTTCATGTTATCCCAATA", "TTCCAATAAAGAACCGAAGACGATGAACACCCCTTGAATTGA", "CAACCGCCCTCGGCTGTGAGTGCAAATTGTTGAGATCTCTCT", "CCCTCGGCACAGGGGGACCCTCAATCACATAAGGCACGGATA", "CCCGAGCCCTTGAGACTCAACGCTACGACGGATGGAGAGACA"]
k = 6
SyntaxError: invalid syntax
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
		return ham

	
>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k]
			if hamming > z:
					    
SyntaxError: invalid syntax
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
	return ham

>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
		distance += hamming
	return distance

>>> def numberToPattern(x, k):
	if k == 1:
		return numberToSymbol(x)
	return numberToPattern(x // 4, k-1) + numberToSymbol(x % 4)

>>> def numberToSymbol(x):
	if x == 0:
		return "A"
	if x == 1:
		return "C"
	if x == 2:
		return "G"
	if x == 3:
		return "T"

	
>>> def medianString(dna, k):
	distance = len(dna)+1
	for i in range(4**k-1):
		pattern = numberToPattern(i, k)
		z = distanceBetweenPatternAndString(pattern, dna)
		if distance > z:
			distance = z
			median = pattern
		return median

	
>>> dna = ["TGATGATAACGTGACGGGACTCAGCGGCGATGAAGGATGAGT",
"CAGCGACAGACAATTTCAATAATATCCGCGGTAAGCGGCGTA",
"TGCAGAGGTTGGTAACGCCGGCGACTCGGAGAGCTTTTCGCT",
"TTTGTCATGAACTCAGATACCATAGAGCACCGGCGAGACTCA",
"ACTGGGACTTCACATTAGGTTGAACCGCGAGCCAGGTGGGTG",
"TTGCGGACGGGATACTCAATAACTAAGGTAGTTCAGCTGCGA",
"TGGGAGGACACACATTTTCTTACCTCTTCCCAGCGAGATGGC",
"GAAAAAACCTATAAAGTCCACTCTTTGCGGCGGCGAGCCATA",
"CCACGTCCGTTACTCCGTCGCCGTCAGCGATAATGGGATGAG",
"CCAAAGCTGCGAAATAACCATACTCTGCTCAGGAGCCCGATG"]
>>> k = 6
>>> print(medianString(dna, k))

Traceback (most recent call last):
  File "<pyshell#507>", line 1, in <module>
    print(medianString(dna, k))
  File "<pyshell#504>", line 9, in medianString
    return median
UnboundLocalError: local variable 'median' referenced before assignment
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
	return ham

>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k]
			if hamming > z:
					    
SyntaxError: invalid syntax
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
	return ham

>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k]
			if hamming > z:
					    
SyntaxError: invalid syntax
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
	return ham

>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
		distance += hamming
	return distance

>>> def numberToPattern(x, k):
	if k == 1:
		return numberToSymbol(x)
	return numberToPattern(x // 4, k-1) + numberToSymbol(x % 4)

>>> def numberToSymbol(x):
	if x == 0:
		return "A"
	if x == 1:
		return "C"
	if x == 2:
		return "G"
	if x == 3:
		return "T"

	
>>> def medianString(dna, k):
	distance = len(dna)+1
	median = ""
	for i in range(4**k - 1):
		pattern = numberToPattern(i, k)
		z = distanceBetweenPatternAndString(pattern, dna)
		if distance > z:
			distance = z
			median = pattern
	return median

>>> dna = ["TGATGATAACGTGACGGGACTCAGCGGCGATGAAGGATGAGT",
"CAGCGACAGACAATTTCAATAATATCCGCGGTAAGCGGCGTA",
"TGCAGAGGTTGGTAACGCCGGCGACTCGGAGAGCTTTTCGCT",
"TTTGTCATGAACTCAGATACCATAGAGCACCGGCGAGACTCA",
"ACTGGGACTTCACATTAGGTTGAACCGCGAGCCAGGTGGGTG",
"TTGCGGACGGGATACTCAATAACTAAGGTAGTTCAGCTGCGA",
"TGGGAGGACACACATTTTCTTACCTCTTCCCAGCGAGATGGC",
"GAAAAAACCTATAAAGTCCACTCTTTGCGGCGGCGAGCCATA",
"CCACGTCCGTTACTCCGTCGCCGTCAGCGATAATGGGATGAG",
"CCAAAGCTGCGAAATAACCATACTCTGCTCAGGAGCCCGATG",]
>>> k = 6
>>> print(medianString(dna, k))
CGGCGA


>>> dna = ["CCCTGAATTAACTAGATCGGCCGTTGATAACCATTGGAGTTG,
"CCTACGTCGGTTCCACCCCCCGCGTCGCACTGATAAGAGTAT",
"TAAGAGTGAAAAACAACGGACAATTAGCCGGATGGTTCGAAA",
"AGCCTATGAGAAACACCGCCTTCCTTATATTATCCCGCATTC",
"TGGTGCCAAGTTCATTGCTGTAGATGCCTCTGATAAAGGTGG",
"ACCCCTAGGATGACTTGTTGAAAACACCATATTTCGCCGAAT",
"TCGACGTCAAAAAGGACGGAGTTGACACTATGAGAAGTGTGA".
"AGGGCTTAGTCATCGCCCCTTGGTTGAAAAACTTGGGGCTAG",
"CGGGCATGAGAATTGCTATACTACCACTACCGGTGCGATAAA",
"TCCCTTAAGAGATGCCAGTGAAAATACATTATGGGACAGATA"]
SyntaxError: EOL while scanning string literal
>>> dna = ["CCCTGAATTAACTAGATCGGCCGTTGATAACCATTGGAGTTG",
"CCTACGTCGGTTCCACCCCCCGCGTCGCACTGATAAGAGTAT",
"TAAGAGTGAAAAACAACGGACAATTAGCCGGATGGTTCGAAA",
"AGCCTATGAGAAACACCGCCTTCCTTATATTATCCCGCATTC",
"TGGTGCCAAGTTCATTGCTGTAGATGCCTCTGATAAAGGTGG",
"ACCCCTAGGATGACTTGTTGAAAACACCATATTTCGCCGAAT",
"TCGACGTCAAAAAGGACGGAGTTGACACTATGAGAAGTGTGA",
"AGGGCTTAGTCATCGCCCCTTGGTTGAAAAACTTGGGGCTAG",
"CGGGCATGAGAATTGCTATACTACCACTACCGGTGCGATAAA",
"TCCCTTAAGAGATGCCAGTGAAAATACATTATGGGACAGATA"]
>>> k = 6
>>> print(medianString(dna, k))
TGAAAA

>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
	return ham

>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
		distance += hamming
	return distance

>>> dna = ["ACACACATTATATCAGCTAACGTCCCTAAGCTGTATTTAAACATACCACGACAGGAGCCCCAATATACTCGCTCAGAAGGGCTTCATCGTGCGGAGGT", "GCCAAAACTAAGATGTCCTACCCCGGAGAGCCTCCCAAAAGCGCGAGGGTGTGATTAATATCATTAGACCGGATGCGACAACCAGGTTATCGAGGAGG", "TGTCGTGGCGAAGACTCGTCGTTCGGGGAGCTTCCCGACCAAAGTGTCATCTACCCACTCAGCTGACACGAGTGCAACAGTCGCAAAGCCGGCCCCGT", "ACCTTGGCCTACCCCAGGCAGGAACTCGTACGGTCATCCTAGTGAGAAGATGGAACATGTGACCTTCGAGGTACCATCTGATTTCCCTGTCACGGATG", "GAAGGTAATCAGACAGGGGACCTGTATATCCGAACAGGGCACCTAACTTAGACGAGGGAAGTAAGGAGCTTGACCGTTTCCCTCTTATTGTAAACAGG", "AGCCGGCCCCCATGTCTTCTATACCACCCGCAGGCCCAATTTTCAGAAAGTTAAATGCCATGCAGGTGCCGTCGCGCCACGCAATGGTAGAACAAAAG", "AATGTGTCATTGGCGCCACTACCCTTCGTCATCCAAGGGGCACCCAATCATGACTATAGGGAGCATAATCCATGACACGTGACTGGACGTATGAGCGC", "CGCGAAATGGAATAGATTCCGATGTCCGATGAGTCAGCGCCAAGATGATCGGCACGTGGACACGAGTTCCACAAGACCACGGCACTACATCGCCAAGT", "TGTCCATGCGTTGATGACCAGATTACATGATTATTCAATCAGAGGCGCGGACACTGCCGTCAGGCGCCCCGTAAGCTACAGTCCAGGTCGGGCTTCCC", "TTAAGGGCGCGATTTGCGAACCGACTTTTGACGTGGCTAAACTTGCTACAATTACCGTCTGCAGCAGCCGCGGCATGGGCCAGACGGCTGATGCTTTC", "CATATCGTAATAGCCTAACAGTTGGGATGCTGGTTAAAAACCCCCCCCACAACCTTTGCTTGTACGTGAGAGGGCAATAAGTGGATGGCCGACGGTCA", "GTCCAGCATACTGATGATTAGACACCGCACCTTTTTTGCGTCGCGTCTAGCATCGCACCGAGTGTCCCTCCCGGGCAGTATTTCTGGCAAAGGCCGCG", "GATGAAGGGGTTCAATTTGGCCATCTTGCGACGTCCTATATGATTGGGTTAAAGCGGCCGTCGGCATCGCAACCTCTAGGAACTCTATCCGCCGTTAC", "TGCATCATGCAGGTAAATTGTAACGGACTGTCCCTACGCTGTAATCGAGGCCTCAATGTTTGCGCGTAGCGGGGCATCAAAGGACCACGGAGTTGTTG", "TCGGATGAAACTGACATAACTAGTACGGGACAAAGTTAGATCATCTATAGCCTTGAGCTGATGCTTTGCGACGTAGTTAGCTCGTAACATTCCAACCT", "GAAAGGTAGGGATGGAAGACACCCTCTCATCGGAAGTTGTGTGTCTTGCAGCTAATACCACAAATACTTGCACCTGCGTGTCTGATGCTTCTGCGTGA", "AATCGCCTGTCGAAAAATACGTGGTAACTAGTACAGGCGAGAGCAGGGTCGGAAGACTATAGCGACGCCAACTCTTTGTGTAAGAGTACGGCGCGGGC", "CGTGAACGCTTTGTACAGTCGAAATGTGTCCGTATAACATAGTCGCAACGACGAATGGTATTTGTGTACTCAGAGTCCTATATTGTCTAGCTATCGAG", "TGCTTAGTACGCCAAGTGAGCGGAATCCGGAAAGGCATCAAAGTTTTAGGGAGTCTCGAAACGGTTGTGATTGCAGGCGGTCCACTGTTCGGCATACA", "GAATGGTAACCTGCCGGAATCGGCCTAATTTCTTGTACTTTTTGACACTGCAAATGGTATCTATGTGTGGTAAAAGTGTTTGTTGCCACCTTCCGTGA", "AACCCGGACGGGGGCCCAAAATGGCTTCTCCGGAGGATCCAGGTATTTATATGAGTTGCCTCCGTCCAGGGCCACTAAACGCGTACAATTTTAGGTTT", "ACGACGACGCCAAATATATCTACGGTTTTGATGCGGAGGGTTAACATCAAAATAGCATCCTTTATACAAGTTACTGAATACATAAGAGGTCGGCGCCA", "GGGCTGAAAGGACGCGGGCCGACGCTGATGTGGCAAACTACCGGCTATGGGTACCATGCGTTCTAGTCAAAAAGGTCCTTTAAATCGTCGTCAGTTTC", "CTACAACACGCACGCTATGATGAGATAAATGGGAGACTACGTTACAGTAGAACATATGAGGTTGCTCATATGGCTTGGAAAATAAAGTGTAAGCTCCA", "ATGGACCCCATGAGTACTCGGGGATGTCGTATACTTAGGAGCTAGTAAGCACACGGCATGAACGACCAGAGCTATAGCTCCAAGTTCGCTGGGCGCGC", "GAAACGTAGAGTGATACATAGGACATAACATTTGTCGGGGTAGCAAATGCACTCCCATGCCTCAGCAGAACGAATGCGTTATTCCTCGCTGACCCCTC", "ACATAACCAAAGTTGTGGATGCACCCAACTCTGTTCGAGACTTCACCATCACGTGGCGCGTGCGTCAGGCACGAGCCTTGCGAGGGGGAAACTCGGAT", "ATAAGGTGCACGCCAGGTTTTAGCGACGACAGGGATTCGTAGTTCTTTAAGAACGTGTAGCTTTGTGTGTCCACCACGGGTTATGTGCCCTTCAAACG", "AACGTGAGCTCCGGCGTTGGTAATCCTTTCCCAGATATGATTTACATTCACAATCGGTTGATGCCACTTTACCGCAATACCCTGACAAGTTTGACGTT", "TGGCGCTAACTGTCCGCACCAACTTGAACGGCGTTTCTTGTTTATCAACTTATTTGCACTTTCGAGCTGGTATTTGGAGTTTCATGAGGGTTACTCGT"]
>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
	return ham

>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
		distance += hamming
	return distance

>>> dna = ["CCCGCAAGGCAGTAGATCCACCACCCCTGTAACGCAGTGAAAAATTGCGATAGGTTACCCCATTGTTAGTATGCCAGTCCTGGATGTGTGACGGTTCGGATATTCAG", "TTGGCTCCCGGGGCTATATATAACTTTTCTGAAAAAAGCTCCGGCGGTAATTGGAGCAGGAAAAATGGGCCGAGACCCGCTGTTATTCCGTTTGCTTCTAAGGAGTA GAGAAGCTGTAAGGTTTCAGTTCCGATAGTTAACGCACGCCTATCCGTTCGTTGTAACAGGATGTCCCTGGACCTAAAAGGGTTCACGGGGAATGGTCGCACGCACT", "TTAGAGTAGGTTTGTTTTCGTACAACTTGGCGTCACATATTCCCTAAATTGATTCGGGCGTTGATGTGTACAACGGCGTGGTGCCAGGCAAGTTCTTGCATCCGACC", "AGCGTCAGCACGATCGGTAATTTTAGATAAGCAAATTACAGGGTAATGTACGTTCGTGACAGAGCTCCTATTGGACCTCTGTGTAGGAGGTTGTCCAGTCCAAGATG", "AGAGCAGACCTTATTCTACACACCCCAGCGTTGCAATATGTTAAGAACTCTGGAAGCTCGTCCCAGGATCTTGAATGTTGTATAACGTGATTTTACTCCTGTTGTCC", "CAAACTATGAGATCTTACCGTTGATGAAATGGGAACGCAGTATTGGGCATAAAGGGCCTGGATGCAGGAATGGCGCTGGAACCCATTTGCGTGTGTCCCCAAAGCAT", "CATACCTGTAGGTACTGCAGTGCCGAATGAACTCAGAATCGCGTCCGGCCAGACCTGCCATCTTTAATGGGACCGGCAACCCCAAGGGTCCCACCGAATGTGATTAA", "CGTACGACAATACGGGGTCCCTGGTCCCGTAGACTTGCGTGACCCTACCTAACGTCCCGGCAGAGACTTCTCCAACTTTCGGCTAATCGTAGTGTAGGCTGGTTATG", "CAGTCCAATCATAACTGGTGGCTGTCAGACACTTGCCAGTAGCGGGGTGTCAGGTGGCGAGGCGCAGTCAGCCAGGCTCTTGCTGACGAGAGATGTAGCTGGCGTCT", "TTAGGACATTTTTCTCGCTCGCAAACTGTACGCATCGATGCCTATATCTGTATCGGGCCGGTCTGGGTAGCATGGGATTTAATGCCTGGTGATTCAACCCTTCCACT", "GTTCTGTGGTCCTAAAAGGCCAATAGTCTGATGTCTTTGCGGAGCGTTGGTCGTAAATCATTTCAAGTTCCAGGAGGATGCGTAGCCCGCCCCCAAGACATAGCCCG", "ACTATATTGCAGAGCATGATAGCCTAAGCTAGTATAACGATGTAATCAATACTGACTAAAAGCGCGGGCGTATTCTCGATAAGGATGTTGCAGATGGAACCGTTAGC", "ACTATCTGCTTAGCGCGAACTGGCGCGAGTCGTCTCAATAGGGAACCCGTGTACCCCGCGCTTCACTAAGCGTCACTTAGGTATGCAACGGGAGCGAATTGATACCA", "CGGTACGCTGTTGTTAATGTAGAGTTGCTTTTACAAGGAGTCAATGGCTCGAATGACGGTTACGAGCCGCGCGATAGTGAACGCCTGCAGCAAGGGGTTTCTGACGA", "CCTGTCCGGCTAGCTTGAGCGTACTTGGCCTGCGTGCCCACATACGCCAGCTCCCCCGGTTTCACAAGTGGGGTCTAGGCCCTGATCACGTTTAGCTTCCTTTCTTG", "CGGCTTATATACAGTGAAACGTAGCTATCGGGCACGAAAGGCATAAGTCCTCATTCTGCTCCAGTCCTCGGGTCGGATTTAAAACAGGAACCGAGCCCCAGTATGAA", "ATTCAAGTGCGGCGTCTACTTCAGCTGTGCAATCTAAGTCGTCACCGATACACGTCCGCCTGGTTCCAGATTTCGTGAGATACTAGTCTGAAGTATCCCGAGTAGAA", "AGTAACCCCTAATACTGAGGTACTACTACTTCATCAGATTAGGATGCCGGAACGGGTTCGTATGGGTGTTTCACTGAGTTCGCGATTAATCACGTTCGAGCAGTGGA", "ATCTATGCTTAACGAATCGCTGTTCAGAATTTATTAGCTCTACCGAAGTACGTAGACTGGCCCTATAGTCCCTTAATGAGACGCACTTATTGCCCTGCAGGGGAGTT", "CAGCAATGCAATTCTGGCGAAACTATAGGGAAGCTCGTAATAAAACGAATACGAACGCATCAACACTGTCACTAAGTGGGTAAGATAGCAGACGGTGATGACGTGTC", "GTGACCCCGCCACGCTCTCGGCAGTTTCCCAGCATTCCTGCCCCTCACATCAACACGGATTCTATTGCCGCCTTTCCCAAGGAACAAGCGCCACTGATACGTTTAGC", "ACATGGGAGATGGGACGTCTTTGTATAAGGGAGACAAAGGTACGACATCGTCCGTTACCGGTTATCGCAGGAGATGAATTCAAGTTGCCGGGACGTTGGCGTTTAAT", "TTCAATGGCGATAACGCCGGAGTATCATAGTAGCCTGGTCAATTTTGCATAGTTTCGAGTGCTGGGACAAAATCCTTCTTCGTCGGGATCGGGGGCCAACGAATTGC", "TTCTGAAGAGCTCGTAGAACCGGAAATTGGGTCATCACAACGGGTTTGTATTCTCAGCACTGAGGGAATCCATCTGCCCTGATCTTGTGGAGGGCTCACCAAAATTG", "CTTCAGGCTAGGTATATAGCAACTTCTGGTGTCTTCTGCCCAGTATTACCATAAGCTACCTTATCTACCTTGGTCGTAGAGAGTCGGAAAGAGAGCGTTAGACTAGA CGACGCGGTGTGGGGTTGAAATGTTGGTGTGTCCCACCCTAACACTTGCGTCCCCCCGTATTTGGGGAGGTGATATCTCGTGGCACGCCATTGAGTGTTCTGTAAAG GATGTTCACTTGTATATTCGCGCAGACCCCGGGTCGAAGTACTAATGACCGACGCTACGAGGGCAGGTCTGGTCTGCTAATCGATGTGCCTACTCCCCACCGACGTA", "TCGTAAGTTTAGTCTAAGATGAATCACCTTGTACCGGTCCTAGTACGAGGCGTTGGTTAAAAGCTCAGAACTGAACGGACGAAGGCAACAAATCGAATCGAGTCGAA", "CGATGGGGACCCGCATGGAGCTCCCTGAATGCCCAAGGATCCCGACTTATCAGCCCGTAGGCAAATGTCTGTAACGTGATTCCGATCTCTTCTCAAGCGGTCTAGTG", "AGCGATATTGGTAAATTATTTCTGTCATTTACGGAAGACATCATACCTATCAAACTTATTCGGACCTTGTAACCGGATTGAACTCATACTATGAAGTTAGTCATTTG", "GGAGGCGTGATGTCATGACCAGAGTCGCAACTTCATATCTGGGTCTGTCATGAGTTGCAGAACCTGAATACAATGTCGAAAAGACCGGAATCATGGTACTAGAGCGG", "ACAGAATAATTTCTTTATTCTCCGCCATATTGCTCCTGGACAGTAGAGGCTACTGACCGTCCAGTTATATTACACTGAGAGGTTTGGCAATGATATACCCGCCTTTC", "CTGTCACCTCGCGAGGTTCGGGTGCGCATAGGATGAACGGCGAGAAAACCTCCGACATGGGTGCGAAGACAGCTGTTGGTTGGTTCCAATTCCCTGGGAAGGTTGAC", "TAGCAAAGTGCCGTTGCCCATTTAGTTCGATCTTCGACCGTCGACGAGTATTGGGGACATACCGGGCATAGGGTTACTGGATTAATAGACGGACGTGATAAGTATCA""]
       
SyntaxError: EOL while scanning string literal
>>> 

>>> def medianString(dna, k):
	distance = len(dna)+1
	median = ""
	for i in range((4**k) - 1):
		pattern = numberToPattern(i, k)
		z = distanceBetweenPatternAndString(pattern, dna)
		if distance > z:
			distance = z
			median = pattern
	return median


>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
	return ham

>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	for x in dna:
		hamming = k+1
		for i in range(len(x) - k + 1):
			z = hammingDistance(pattern, x[i:i+k])
			if hamming > z:
				hamming = z
		distance += hamming
	return distance

>>> def numberToPattern(x, k):
	if k == 1:
		return numberToSymbol(x)
	return numberToPattern(x // 4, k-1) + numberToSymbol(x % 4)

>>> def numberToSymbol(x):
	if x == 0:
		return "A"
	if x == 1:
		return "C"
	if x == 2:
		return "G"
	if x == 3:
		return "T"


>>> def medianString(dna, k):
	distance = len(dna)+1
	median = ""
	for i in range(4**k - 1):
		pattern = numberToPattern(i, k)
		z = distanceBetweenPatternAndString(pattern, dna)
		if distance > z:
			distance = z
			median = pattern
	return median
SyntaxError: invalid syntax
>>> 
>>> 
>>> def medianString(dna, k):
	distance = len(dna)+1
	median = ""
	for i in range((4**k) - 1):
		pattern = numberToPattern(i, k)
		z = distanceBetweenPatternAndString(pattern, dna)
		if distance > z:
			distance = z
			median = pattern
	return median

>>> def hammingDistance(p, q):
	ham = 0
	for x, y in zip(p, q):
		if x != y:
			ham += 1
	return ham

>>> def numberToPattern(x, k):
	if k == 1:
		return numberToSymbol(x)
	return numberToPattern(x // 4, k-1) + numberToSymbol(x % 4)

>>> def numberToSymbol(x):
	if x == 0:
		return "A"
	if x == 1:
		return "C"
	if x == 2:
		return "G"
	if x == 3:
		return "T"

	
>>> def medianString(dna, k):
	distance = len(dna)+1
	median = ""
	for i in range(4**k - 1):
		pattern = numberToPattern(i, k)
		z = distanceBetweenPatternAndString(pattern, dna)
		if distance > z:
			distance = z
			median = pattern
	return median

>>> 
>>> 
>>> 
>>> 
>>> def distanceBetweenPatternAndString(pattern, dna):
	k = len(pattern)
	distance = 0
	wordList = dna.split()
	for text in wordList:
		hammingdistance = float('inf')
		for i in range(0,len(text) -k):

			if hammingdistance > hammingDistance(pattern, text[i:(i+k)]):
				hammingdistance = hammingDistance(pattern, text[i:(i+k)])
		distance += hammingdistance
	return distance

>>> def hammingdistance(l1,l2):
	if (len(l1) != len(l2)):
		return 0
	else:
		return sum(i != j for i,j in zip(l1,l2))

>>> print(distanceBetweenPatternAndString("AAA", "TTACCTTAAC GATATCTGTC ACGGCGTTCG CCCTAAAGAG CGTCAGAGGT"))
5
>>> print(distanceBetweenPatternAndString("TTACAC", "TTGTAACCGGTACAAGGGATAATAAAGAAATGAGTTGACCCGGTGAAAACACCTATGTTATTCTCGAATCCGCTCTTCAGGCTCTAAAAGC GGTATGCCGGGAATCAGCGGAATATCGCTAGATGTGGGGACTAGAAATAGATTTCGACTTGTGTGGCTACCGGAACACGCTTGTCTGAGTG ATCCAGGCGACCCTATATGAGGCCATTCATTATACTTATATAAGAGACGGGAGGTGTTTTCATCTTGAAGCCGCGGCAACGCCCGGATTAC TCTGGTTGACCAGGCGATCTCCAGTCAGGTCTTAGGGGGGGAACACTTAGTCTAAGTACCCGATAATCGGTACAAGCGGGATACCTTTGAC ATTGAGTGGCTCTAGGGAATCCCTTGGCCATCTAGAATCCAGAGCGCCAGGATAGTTACGAGATTCGTCAGACAATCAACAGTTAGACATA AGAGCGCGATAGTTACAGCTTTAAGTTTAGGCAATCGTTGCCGAATCGTGTGCTGAGGCCTCGCGCCGATCTTTTTAGCTACGTTGCGCGC CAAACTCAGACTGGACACGGCAGATCGGAACGCCCGATACTTGCTAAATACTGACAAACGCAGTAGCCTAGGGGGAACCCGCTAGTAGTGG ATGACGCGGCGCGCACTCGTCTTCGTGCGTGTCTCTGCATGTAGCGCGATTCCTCCGTTCGGGGGCTCGGCCTCTGCCATTTCCCCGAAGG CCACGCCTTGTTAAAGGTGCATACAGGATGAAACGAGATTCTCAAGCGTGAGAGTCTACTAGAAAGGCCATGTAGGTCGTCGGCTGCGGGA ACGATTGTACAAGACGATACATGGATTGCGCGCACTATTCTATAGACCAAAAAGCCAACCATTAAGTCTTCCCAACGCCGGGTGGGCCTCA TTAATAGCACGACGGCTGCAGCGCAATAATTTAAAGTCCTAGTTAATATCCGCAATTGCCGGAAGAGGAACAGATGAACCGTACGCACAGG CGCAATTAAGACGGGGCTTAAACTCTAGCCCATGCTTGGAGGGAACGGCAGGCCGTGATGTACGTCGTGCGGCAGGGTAATAGAATGGCTA GTTCAGGTGCTGGATTGACCCTCTTCAAGTGGGAGCGTTATGCTACCACGTGATAGGGTTCGACTATGAGTTCTTCATCGCCTCTTTAGGG GCACACTGAGTAACGTAATAAGTTGCTGCAAAGGTATTGCGGGGCAATCTCGTGATTTCACCATAGGGCTGGGGAAGGGTTAGAGTTGCCG CTGCGTCGACAACGGTGACCAAGCCTGCAATTATAGGCTGGGAACTGGCGCAGCGCTTGAGACACTCGGCGCGTTCACTAGCGTATCCTAT CCGTTGTAAACGGAAATACATTAAATGTAATACGGCACGGGCATGTTATCCGTCGGACGCTCAAACTTCGATCATCCCGAGCTGTATATTC CTGCTGGCGTATACCAGTTGTAGTTTAAGATAAGAAATGCCGTTTCTGAGACACGAAACTGAGGTGCATCTGGACCTCTCCCGCTTCTGTC TTTCCTAACTCTAATTATTCACTAGGCAAGCGTTGGTCAGACGTCGGAATCCATGCCCATAGAACCAGTGGGGAATCATCAGTGTTAAATA CTGGCCAATTTAACTTTGCCGAGTCCTTCAGTCTCGTCCCATCAGGAATGACTTAAGGCAGTCCTTCTCATACGTCGATGTTCTGATCGAC ATTATACACGCTAATTAACGGGCAACCAGTACTTATCCAACGACCGATGCTTAATAAGAAAGATCTTACACACAGGCTTGGCGAGAGTGTT ACTCCGTACGGACTTTTACAAATGCAATGAGAGACGTTAAGATGTGCCCCCTTGGCTATACGTCGCATACAGGGCTTGACTCGAGCAGGCA TAATATGTAAGAGTATATGAAGTCTATAGCCGTGGGACCTCGATAATAACAATCGGGTACACTCGGCAACGGCAACTTTGTTAGGGAGTAA ACGTAATCCGCACGAGTGAGCACGGCCTGCCCAGGAATTCGATGCCTTATCCTAGTGGCAACCCGAGTCAACATATGACCCTAATACCGAG GACTTACGTACCGTTTACGGCATGCGGTGCCCCCAGCGATCTGTACAGCAGCTCTGGGACAGGGAACCCAGTGGAGCAAATTGCCTTCTGG TGTGTTACCACTTCTTCGCAACCCGATGCTGCTCTCGACCCTCATCAATCGAAGCACATCTCTATGCACGTCCATATAAGGGCGGGTCTAC ACTGTGTATTCTCTCACCGGTTACTTAGTGGGGGCCTTAATATGATTGGGGTATTACCGGGTTGCCCGTTCCAAACAGTGCTTGAAAAGCA CCATTTCCTTAATACACTGGGCACCTCTGGTGACACAAAAGTAAGTATATTCACCCATCGGGATGCTCTGCACGGAAAGTTATGCTAGAGC GATATCGCGACCCGATTGACTTGTGGATGCTACGTTCTGTAAAAGGATTTTCGATCTTGCAGGCCCCCTCTGATGATCACCGGCTCAAATC GGTCACACGAACTTAAATATCTCTGACCGAGTCATAATTTCGCTGCACGGCCCACGGTGGCAGGGGGTCTAAACATCCGGACCACACTCAG ATATTGGCGTGCTCTGTACAAATTAAGTATTTCCATGCAGTTTTCTCTGACGGTAATATTCACCGTGTTGGATCATGTGTCACATCCGACG TGCGAGCATTCTAAGATTTTCGAGATGGTGCTTGTTTAATACGCCTTGTTTGGTCTGAGCGCGTCTGGTTGGATTACCCTTGGACTTATGT ATGAACACACATTAGGGGGCATATAAGGCCGATCTGATTGCTCCTGAGGTCCCTATTGTCGAGGGTCTGTTTACGAGTTAAATGTCTGTAC CTGACGGCTGGCTGGTCTCGGCTTCCACTACATGCACAGAGTGCATCAACTAGCGCTCGTTAAAATAAGATATTAACCTTAACCGCTCAGA ACGTCAAGAGTTCAATCTCACAACGGTCTATTAAGTTAGATGATTGATCTACTCGCGTTACACCAGTTCAAGCAGTGAACTATTACGGGCA TGAGGTGTCGTCAAGGCAGATCTCGTAGCCCCGATCCAGGGCCCTTACGCCTGCAAATAAGCAGACGTTCGGTGATTATTCCGTAACGGTA AGACCCTCGACGACGTCCTTTATTGGATTATGACTTTGTCGTTCCGCCCAGAAACCAAAATGGGACACGCACAGGACACTCAGCACGGCCA AGCGAATAAACAGGAGTCTCCACAGTTCTCTCCCCCGAAGGCATTGGTGATAGGCCGACTCGGCGACTCTCTCTGATTACTCTGCGGCCAA ATTGCATCTACATATGGCATAACTGCCTTGCTGGATCCGACGGTTTCCGGATGTCTTTCAGACCGTGGGGTTGGAAGGAATGATCGCGAAC"))
59
>>> 
